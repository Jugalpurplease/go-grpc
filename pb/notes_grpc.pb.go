// syntax = "proto3";

// package pb;

// option go_package = "/pb";

// import "google/api/annotations.proto";

// // The notes service definition.
// service Notes {
//   // Saving a note
//   rpc Save(Note) returns (NoteSaveReply) {
//     option (google.api.http) = {
//       post : "/v1/resource"
//       body : "*"
//     };
//   }
//   // Retrieving a note
//   rpc Load(NoteSearch) returns (Note) {
//     option (google.api.http) = {
//       get : "/v1/resource"
//       body : "*"
//     };
//   }
// }

// // The request message containing the note title
// message Note {
//   string title = 1;
//   bytes body = 2;
// }

// // The response message confirming if the note is saved
// message NoteSaveReply { bool saved = 1; }

// // The request message containing the note title
// message NoteSearch { string keyword = 1; }

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: notes.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Notes_Save_FullMethodName = "/pb.Notes/Save"
	Notes_Load_FullMethodName = "/pb.Notes/Load"
)

// NotesClient is the client API for Notes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The notes service definition.
type NotesClient interface {
	// Saving a note
	Save(ctx context.Context, in *Note, opts ...grpc.CallOption) (*NoteSaveReply, error)
	// Retrieving a note
	Load(ctx context.Context, in *NoteSearch, opts ...grpc.CallOption) (*Note, error)
}

type notesClient struct {
	cc grpc.ClientConnInterface
}

func NewNotesClient(cc grpc.ClientConnInterface) NotesClient {
	return &notesClient{cc}
}

func (c *notesClient) Save(ctx context.Context, in *Note, opts ...grpc.CallOption) (*NoteSaveReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NoteSaveReply)
	err := c.cc.Invoke(ctx, Notes_Save_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notesClient) Load(ctx context.Context, in *NoteSearch, opts ...grpc.CallOption) (*Note, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Note)
	err := c.cc.Invoke(ctx, Notes_Load_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotesServer is the server API for Notes service.
// All implementations must embed UnimplementedNotesServer
// for forward compatibility
//
// The notes service definition.
type NotesServer interface {
	// Saving a note
	Save(context.Context, *Note) (*NoteSaveReply, error)
	// Retrieving a note
	Load(context.Context, *NoteSearch) (*Note, error)
	mustEmbedUnimplementedNotesServer()
}

// UnimplementedNotesServer must be embedded to have forward compatible implementations.
type UnimplementedNotesServer struct {
}

func (UnimplementedNotesServer) Save(context.Context, *Note) (*NoteSaveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (UnimplementedNotesServer) Load(context.Context, *NoteSearch) (*Note, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Load not implemented")
}
func (UnimplementedNotesServer) mustEmbedUnimplementedNotesServer() {}

// UnsafeNotesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotesServer will
// result in compilation errors.
type UnsafeNotesServer interface {
	mustEmbedUnimplementedNotesServer()
}

func RegisterNotesServer(s grpc.ServiceRegistrar, srv NotesServer) {
	s.RegisterService(&Notes_ServiceDesc, srv)
}

func _Notes_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Note)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotesServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Notes_Save_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotesServer).Save(ctx, req.(*Note))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notes_Load_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoteSearch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotesServer).Load(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Notes_Load_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotesServer).Load(ctx, req.(*NoteSearch))
	}
	return interceptor(ctx, in, info, handler)
}

// Notes_ServiceDesc is the grpc.ServiceDesc for Notes service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Notes_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Notes",
	HandlerType: (*NotesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Save",
			Handler:    _Notes_Save_Handler,
		},
		{
			MethodName: "Load",
			Handler:    _Notes_Load_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notes.proto",
}
